#!/bin/bash

# Utils
# ==============================================================================


_bc_s_end_backup_prev_build() {
  # copy all files from home to repo, which have same name as in repo
  find "$BUILD_PATH/repository" -type f |
    (grep -v "$BUILD_PATH/repository/\.git/" || true)  |
    while read -r line ; do
      path="${line#"$BUILD_PATH/repository/"}"
      mkdir -p  "$(dirname "$BUILD_PATH/repository/$path")"
      cp "$FINAL_HOME_PATH/$path" "$BUILD_PATH/repository/$path" 2>/dev/null || true
    done

  # copy all files from home to repo, which have same name as in next
  find "$BUILD_PATH/next" -type f |
    while read -r line ; do
      path="${line#"$BUILD_PATH/next/"}"
      mkdir -p  "$(dirname "$BUILD_PATH/repository/$path")"
      cp "$FINAL_HOME_PATH/$path" "$BUILD_PATH/repository/$path" 2>/dev/null || true
    done

  # remove all files from home, which found in repo but not in next
  #
  # (diff -qr "$BUILD_PATH/next" "$BUILD_PATH/repository" || true) |
  #   (grep "Only in $BUILD_PATH/repository:" || true) |
  #   sed 's/.*: //' |
  #   (grep -v "^\.git$" || true) |
  #   while read -r line ; do
  #     #printf "removing %s" "$line"
  #     rm "$FINAL_HOME_PATH/$line" 2>/dev/null || true
  #   done

  # commit changes to git
  (cd "$BUILD_PATH/repository" &&
    git add -A)
  # if have something to commit
  if ! (cd "$BUILD_PATH/repository" &&
      git diff --cached --exit-code >/dev/null); then
    (cd "$BUILD_PATH/repository" &&
      git commit -m "backup-$(cat "$BUILD_PATH/version")" >/dev/null)
  fi
}

_bc_s_end_release_next_build() {
  # remove all files from repo, which found in repo but not in next
  # we could also remove all besides .git
  (diff -qr "$BUILD_PATH/next" "$BUILD_PATH/repository" || true) |
    (grep "Only in $BUILD_PATH/repository:" || true) |
    sed 's/.*: //' |
    (grep -v "^\.git$" || true) |
    while read -r line ; do
      rm "$BUILD_PATH/repository/$line" 2>/dev/null || true
    done

  # copy all files from next to home
  find "$BUILD_PATH/next" -type f |
    while read -r line ; do
      path="${line#"$BUILD_PATH/next/"}"
      mkdir -p  "$(dirname "$FINAL_HOME_PATH/$path")"
      cp "$BUILD_PATH/next/$path" "$FINAL_HOME_PATH/$path" 2>/dev/null || true
    done

  # copy all files from next to repo
  find "$BUILD_PATH/next" -type f |
    while read -r line ; do
      path="${line#"$BUILD_PATH/next/"}"
      mkdir -p  "$(dirname "$BUILD_PATH/repository/$path")"
      cp "$BUILD_PATH/next/$path" "$BUILD_PATH/repository/$path" 2>/dev/null || true
    done

  # commit changes to git
  (cd "$BUILD_PATH/repository" &&
    git add -A)
  # if have something to commit
  if ! (cd "$BUILD_PATH/repository" &&
      git diff --cached --exit-code >/dev/null); then
    (cd "$BUILD_PATH/repository" &&
      git commit -m "release-$(cat "$BUILD_PATH/version")" >/dev/null)
  fi

  # remove next
  rm -rf "$BUILD_PATH/next"
}

# Main
# ==============================================================================

bc_s_end() {
  mkdir -p "$BUILD_PATH/repository"
  mkdir -p "$FINAL_HOME_PATH"

  if [[ ! -d "$BUILD_PATH/repository/.git" ]]; then
    (cd "$BUILD_PATH/repository" && git init > /dev/null)
  fi
  if [[ -d "$BUILD_PATH/next" ]]; then
    _bc_s_end_backup_prev_build
    _bc_s_end_release_next_build
  fi;
}
