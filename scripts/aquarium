#!/usr/bin/env coffee

thenify = require('thenify').withCallback
meow = require 'meow'
fs = require('mz/fs')
childProcess = require('mz/child_process')
mkdirp = thenify(require 'mkdirp')

pkg = require '../package.json'

main = ->
  cli = meow
    help: false
    pkg: pkg

  aquraium = new Aquraium()
  aquraium[cli.input]()

class Aquraium
  DEFAULTS =
    main: process.env.AQUARIUM_MAIN

    media: process.env.AQUARIUM_MEDIA
    info: process.env.AQUARIUM_INFO
    products: process.env.AQUARIUM_PRODUCTS
    support: process.env.AQUARIUM_SUPPORT

    cloudStorage: process.env.AQUARIUM_CLOUD_STORAGE
    cloudStorageSource: process.env.AQUARIUM_CLOUD_STORAGE_SOURCE

    disposal: process.env.AQUARIUM_DISPOSAL
    disposalSource: process.env.AQUARIUM_DISPOSAL_SOURCE

    backup: process.env.AQUARIUM_BACKUP

  constructor: ->
    @options = DEFAULTS

  init: ->
    @createPaths()

  createPaths: ->
    # main
    # ├── info
    # │   ├── alpha
    # │   ├── iota
    # │   ├── lambda
    # │   ├── mu
    # │   ├── omega
    # │   ├── omicron
    # │   └── psy
    # ├── media
    # │   ├── books
    # │   ├── images
    # │   ├── music
    # │   └── video
    # ├── products => support/cloud_storage/backup/products
    # │   ├── alpha
    # │   ├── iota
    # │   ├── lambda
    # │   ├── mu
    # │   ├── omega
    # │   ├── omicron
    # │   └── psy
    # └── support
    #     ├── archive
    #     ├── cloud_storage -> ~/Google Drive
    #     │   └── backup
    #     │       └── products
    #     └── disposal -> ~/Downloads
    #
    # Defenitions:
    #   -> - sym links
    #   => - hard links

    Promise.resolve()
    .then =>
      mkdirp(@options.main)

    .then =>
      mkdirp(@options.info)
    .then =>
      mkdirp(@options.media)

    .then =>
      mkdirp(@options.support)
    .then =>
      symlinkIfCan(@options.cloudStorageSource, @options.cloudStorage)

    .then =>
      symlinkIfCan(@options.disposalSource, @options.disposal)

    .then =>
      hardlinkIfCan("#{@options.backup}/products", @options.products)

    .catch (e) ->
      throw e


hardlink = (source, destination) ->
  childProcess.exec("hln \"#{source}\" \"#{destination}\"")

hardlinkIfCan = (source, destination) ->
  hardlink(source, destination).catch (e) ->
    return if e.code == 255
    throw e

symlinkIfCan = (source, destination) ->
  fs.symlink(source, destination).catch (e) ->
    return if e.code == 'EEXIST'
    throw e

main()
