#!/bin/bash

# Info
# ==============================================================================

# To use run the following line in your terminal
# bash <(curl -fs https://raw.githubusercontent.com/welldan97/dotfiles/master/battlecruiser) -c ./config.json

# Initialization
# ==============================================================================

set -eEuo pipefail

DEFAULT_PATH="$HOME/.config/battlecruiser"
DEFAULT_REPO="https://github.com/welldan97/dotfiles.git"

FINAL_PATH="${BATTLECRUISER_PATH:-$DEFAULT_PATH}"
FINAL_REPO="${BATTLECRUISER_REPO:-$DEFAULT_REPO}"

# NOTE: may be use proper codes later on
ERROR_CODE=1

trap "throw_error 'Oops! Something went wrong'" ERR

# Utils (used in other scripts as well)
# ==============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
GRAY='\033[0;37m'
NC='\033[0m'

throw_error() {
  # shellcheck disable=SC2059
  printf "\n${RED}ERROR: %s${NC}\n" "$1"
  exit "$ERROR_CODE"
}

print_title() {
  printf "\n🚢  %s\n\n" "$1"
}

print_subtitle() {
  if [[ "$1" == "--success" ]]; then
    printf "\n  ✅  %s\n\n" "$2"
  else
    printf "\n  📢  %s\n\n" "$1"
  fi
}

print_check() {
  printf "    ⚓️  %s" "$1"
}

print_hr() {
  # shellcheck disable=SC2059
  printf "${GRAY}"
  printf "~%.0s" {1..80}
  # shellcheck disable=SC2059
  printf "${NC}"
  printf "\n"
}

print_block_start() {
  printf '\n'
  print_hr
  # shellcheck disable=SC2059
  printf "${GRAY}"
}

print_block_end() {
  # shellcheck disable=SC2059
  printf "${NC}"
  print_success_short
  print_hr
}


print_success() {
  if [[ "$#" == "0" ]]; then # no arguments
    printf "  -   ✅\n"
  else
    # shellcheck disable=SC2059
    printf "  -  ✅  ${GREEN}%s${NC}\n" "$1"
  fi
}

print_success_short() {
  # shellcheck disable=SC2059
  printf "  ✅  ${GREEN}Done${NC}\n"
}

set_status() {
  echo "$1" > "$FINAL_PATH/status"
}

get_status() {
  cat "$FINAL_PATH/status" || echo 'none'
}

confirm() {
  while true; do
    printf -- '- '
    read -r answer
    if [ "$answer" = 'yes' ]; then
      return 0
    elif [ "$answer" = 'no' ]; then
      return 1
    else
      printf '\n- Please, answer yes or no.\n\n'
    fi
  done
}


# Initialization
# ==============================================================================

initialize() {
  print_subtitle "1. Initialization"

  ensure_is_admin
  ensure_path_exists
  maybe_move_config "$@"
  ensure_config_exists
  ensure_repository_exists
  ensure_repository_is_up_to_date
  ensure_executable

  if [[ "$(get_status)" == "initializing" ]]; then
    set_status "installing"
  fi

  print_subtitle --success "1. Initialization"
}

is_admin() {
  id -G "$USER" 2> /dev/null |
    grep -q -w 80
}

ensure_is_admin() {
  print_check "Must be admin"
  if is_admin; then
    print_success
  else
    throw_error "Must be admin"
  fi
}

ensure_path_exists() {
  print_check "Home path exists"
  if [[ -d "$FINAL_PATH" ]]; then
    print_success
  else
    print_block_start

    printf "Initializing Battlecruiser home dir in \"%s\"\n" \
      "$FINAL_PATH"
    mkdir -p "$FINAL_PATH"
    set_status "initializing"

    print_block_end
  fi
}

maybe_move_config() {
  print_check "Config provided as an argument"

  if [[ "$#" == "0" ]]; then
    print_success 'It is not'
  else
    print_block_start

    while getopts ":c:" opt ; do
      case $opt in
        c)
          printf "Config is provided. Moving it from \"%s\" to \"%s\"\n\n" \
            "$OPTARG" "$FINAL_PATH/config.json"
            mv "$OPTARG" "$FINAL_PATH/config.json"
          ;;
        :)
          throw_error "Option -$OPTARG requires an argument"
          ;;
        *);;
      esac
    done

    print_block_end
  fi
}

ensure_config_exists() {
  print_check "Config exists"
  if [[ -f "$FINAL_PATH/config.json" ]]; then
    print_success
  else
    throw_error "Config is not found at \"$FINAL_PATH/config\""
  fi
}


ensure_repository_exists() {
  print_check "Repository exists"
  if [[ -d "$FINAL_PATH/repository" ]]; then
    print_success
  else
    print_block_start

    printf "Cloning repository from \"%s\" to \"%s\" \n\n" \
      "$FINAL_REPO" "$FINAL_PATH/repository"
    git clone "$FINAL_REPO" "$FINAL_PATH/repository"

    print_block_end
  fi
}

repository_is_behind() {
  (
    cd "$FINAL_PATH/repository" &&
      git remote update > /dev/null &&
      git status -uno | grep -q 'branch is behind'
  )

  return "$?"
}

ensure_repository_is_up_to_date() {
  print_check "Repository is up to date"
  if ! repository_is_behind; then
    print_success
  else
    print_block_start

    (
      cd "$FINAL_PATH/repository" && git pull
    )

    print_block_end
  fi
}

ensure_executable() {
  print_check "Executable exists in PATH"
  if command -v battlecruiser > /dev/null 2>&1; then
    print_success
  else
    if [[ -f "$FINAL_PATH/bin/battlecruiser" ]]; then
      print_success "Command is not found, but it's in your PATH"
    else
      print_block_start

      printf "Adding \"battlecruiser\" to your \$PATH in \"%s/.bashrc\"\n" \
        "$HOME"
      printf "Adding \"battlecruiser\" to your \$PATH in \"%s/.zshrc\"\n" \
        "$HOME"
      mkdir -p "$FINAL_PATH/bin"
      ln -s "$FINAL_PATH/repository/battlecruiser" "$FINAL_PATH/bin/battlecruiser"
      printf "\nexport PATH=\"\$PATH:%s/bin\"\n" "$FINAL_PATH" \
        >> "$HOME/.bashrc"
      printf "\nexport PATH=\"\$PATH:%s/bin\"\n" "$FINAL_PATH" \
        >> "$HOME/.zshrc"

      print_block_end
    fi
  fi
}

# Main
# ==============================================================================

main() {
  if [[ "$#" == "0" ]]; then # no arguments
    setup
  elif [[ "$1" == -* ]]; then # no command, just options
    setup "$@"
  else
    case "$1" in
      help)
        help
        ;;

      setup)
        shift
        setup "$@"
        ;;

      *)
        throw_error "unknown command or file \"$1\""
        ;;
    esac
  fi
}

# Commands
# ==============================================================================

help() {
 cat << EOF
TODO: Help message
Usage:
  battlecruiser help
EOF
}

setup() {
  print_title "Set Up"
  #initialize "$@"
  # shellcheck disable=SC1090
  source "$FINAL_PATH/repository/battlecruiser.d/setup"
}

main "$@"
